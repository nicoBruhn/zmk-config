#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

/ {
    input_configs {
        compatible = "zmk,input-configs";

        mmv {
            device = <&mmv>;
            scale-multiplier = <10>;
        };
    };

    behaviors {
        kpml: key_press_moment_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "layer_moment_press_key";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        sticky_key_quick_release: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        kp_hold_kp: kp_hold_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_HOLD_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-on-release;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        sticky_hold: sticky_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_HOLD";
            #binding-cells = <2>;
            hold-while-undecided;
            hold-while-undecided-linger;
            bindings = <&kp>, <&sticky_key_quick_release>;

            tapping-term-ms = <250>;
        };
    };

    combos {
        compatible = "zmk,combos";

        mouse_layer {
            bindings = <&mo 5>;
            key-positions = <31 32>;
        };

        media_layer {
            bindings = <&mo 4>;
            key-positions = <30 33>;
        };

        boot_mode_right {
            bindings = <&bootloader>;
            key-positions = <5 9 6 7 8>;
        };

        boot_mode_left {
            bindings = <&bootloader>;
            key-positions = <0 1 2 3 4>;
        };

        reset_bt {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <0 1 2 7 8 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q              &kp W  &kp_hold_kp F23 E  &kp R          &kp T             &kp Y    &kp U          &kp I                        &kp_hold_kp F24 O      &kp P
&kp_hold_kp F22 A  &kp S  &kp D              &kp F          &kp G             &kp H    &kp J          &kp K                        &kp L                  &kp LEFT_SHIFT
&kp Z              &kp X  &kp C              &kp V          &kp B             &kp N    &kp M          &kp_hold_kp COMMA SEMICOLON  &kp_hold_kp DOT COLON  &kp FSLH
                                             &kpml 1 SPACE  &kpml 2 ESCAPE    &kp TAB  &kpml 3 ENTER
            >;
        };

        special_layer {
            bindings = <
&trans                              &trans   &trans                          &trans                          &trans    &kp LC(C)       &kp LC(Z)  &trans        &trans     &kp LC(V)
&sticky_hold LEFT_SHIFT LEFT_SHIFT  &trans   &kp BACKSPACE                   &sticky_hold LEFT_WIN LEFT_WIN  &trans    &kp LEFT_ARROW  &kp DOWN   &kp UP_ARROW  &kp RIGHT  &kp TAB
&sticky_hold LCTRL LCTRL            &kp DEL  &sticky_hold LEFT_ALT LEFT_ALT  &kp LC(A)                       &trans    &trans          &trans     &trans        &trans     &trans
                                                                             &trans                          &trans    &trans          &trans
            >;
        };

        symbol_layer_1 {
            bindings = <
&trans     &kp EXCLAMATION  &kp POUND      &kp QUESTION  &trans           &trans                                          &kp AT_SIGN                             &kp DOLLAR                          &kp UNDERSCORE                          &trans
&kp CARET  &kp SLASH        &kp BACKSLASH  &kp PIPE      &kp AMPERSAND    &kp_hold_kp LEFT_PARENTHESIS RIGHT_PARENTHESIS  &kp_hold_kp LEFT_BRACKET RIGHT_BRACKET  &kp_hold_kp LEFT_BRACE RIGHT_BRACE  &kp_hold_kp SINGLE_QUOTE DOUBLE_QUOTES  &kp GRAVE
&trans     &trans           &trans         &trans        &trans           &trans                                          &trans                                  &trans                              &trans                                  &trans
                                           &trans        &trans           &trans                                          &trans
            >;
        };

        number_layer {
            bindings = <
&kp N1  &kp N2  &kp NUMBER_3   &kp N4            &kp N5    &kp N6        &kp N7    &kp N8     &kp N9     &kp N0
&trans  &trans  &kp LESS_THAN  &kp GREATER_THAN  &trans    &kp ASTERISK  &kp PLUS  &kp MINUS  &kp EQUAL  &kp PERCENT
&trans  &trans  &trans         &trans            &trans    &trans        &trans    &trans     &trans     &trans
                               &trans            &trans    &trans        &trans
            >;
        };

        media_layer {
            bindings = <
&trans  &kp F7  &kp F8  &kp F9  &trans    &kp F10            &kp F11          &kp F12     &trans  &kp PRINTSCREEN
&trans  &kp F4  &kp F5  &kp F6  &trans    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE  &trans  &trans
&trans  &kp F1  &kp F2  &kp F3  &trans    &trans             &trans           &trans      &trans  &trans
                        &trans  &trans    &trans             &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans        &mkp MB5        &msc SCRL_DOWN  &msc SCRL_UP  &trans      &trans          &trans          &trans        &trans           &trans
&kp LEFT_ALT  &kp LEFT_SHIFT  &mkp LCLK       &mkp RCLK     &trans      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans        &trans          &kp LCTRL       &trans        &mkp MB4    &trans          &trans          &trans        &trans           &trans
                                              &trans        &trans      &trans          &trans
            >;
        };
    };
};
